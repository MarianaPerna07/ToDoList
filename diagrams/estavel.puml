@startuml ToDoListArchitecture

' Include AWS Icons from the public repository
!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v18.0/dist
!include AWSPuml/AWSCommon.puml
!include AWSPuml/AWSSimplified.puml
!include AWSPuml/ApplicationIntegration/APIGateway.puml
!include AWSPuml/Compute/EC2.puml
!include AWSPuml/Compute/EC2Instance.puml
!include AWSPuml/Groups/AWSCloud.puml
!include AWSPuml/Groups/VPC.puml
!include AWSPuml/Groups/AvailabilityZone.puml
!include AWSPuml/Groups/PublicSubnet.puml
!include AWSPuml/Groups/PrivateSubnet.puml
!include AWSPuml/NetworkingContentDelivery/VPCNATGateway.puml
!include AWSPuml/NetworkingContentDelivery/VPCInternetGateway.puml
!include AWSPuml/SecurityIdentityCompliance/Cognito.puml
!include AWSPuml/General/Users.puml
!include AWSPuml/Groups/Region.puml
!include AWSPuml/NetworkingContentDelivery/ElasticLoadBalancingApplicationLoadBalancer.puml
!include AWSPuml/Database/RDS.puml
!include AWSPuml/NetworkingContentDelivery/CloudFront.puml

' Hide stereotypes and use orthogonal line connections
hide stereotype
skinparam linetype ortho

actor "User" as user #Transparent

AWSCloudGroup(cloud, "AWS Cloud") {
  RegionGroup(region, "Region: eu-north-1 (Stockholm)") {
    VPCGroup(vpc, "VPC 10.0.0.0/16") {
      VPCInternetGateway(internet_gateway, "Internet Gateway", "")

      ' Availability Zone 1
      AvailabilityZoneGroup(az1, "Availability Zone 1") {
        PublicSubnetGroup(pub_subnet1, "Public Subnet - Frontend") {
          ElasticLoadBalancingApplicationLoadBalancer(alb_frontend, "ALB - Frontend", "")
        }
        PrivateSubnetGroup(priv_subnet1, "Private Subnet - Backend") {
          EC2Instance(ec2_backend_1, "EC2 - Backend", "")
        }
        PrivateSubnetGroup(priv_subnet2, "Private Subnet - Frontend") {
          EC2Instance(ec2_frontend_1, "EC2 - Frontend", "")
        }
      }

      ' Availability Zone 2
      AvailabilityZoneGroup(az2, "Availability Zone 2") {
        PublicSubnetGroup(pub_subnet2, "Public Subnet - Frontend") {
          ElasticLoadBalancingApplicationLoadBalancer(alb_frontend_az2, "ALB - Frontend", "")
        }
        PrivateSubnetGroup(priv_subnet3, "Private Subnet - Backend") {
          EC2Instance(ec2_backend_2, "EC2 - Backend", "")
        }
        PrivateSubnetGroup(priv_subnet4, "Private Subnet - Frontend") {
          EC2Instance(ec2_frontend_2, "EC2 - Frontend", "")
        }
      }

      ' Availability Zone 3
      AvailabilityZoneGroup(az3, "Availability Zone 3") {
        PrivateSubnetGroup(priv_subnet5, "Private Subnet - Backend") {
          EC2Instance(ec2_backend_3, "EC2 - Backend", "")
        }
        PrivateSubnetGroup(priv_subnet6, "Private Subnet - Frontend") {
          EC2Instance(ec2_frontend_3, "EC2 - Frontend", "")
        }
        PrivateSubnetGroup(priv_subnet7, "Private Subnet - Database") {
          RDS(rds_multi_az, "RDS MySQL Multi-AZ", "")
        }
      }

      ' Global services
      ElasticLoadBalancingApplicationLoadBalancer(alb_backend, "ALB - Backend", "")
      CloudFront(cloudfront, "CloudFront", "")
      APIGateway(apigateway, "API Gateway", "")
      Cognito(cognito, "AWS Cognito", "")
    }
  }
}

' Connections
user --> cloudfront
cloudfront --> alb_frontend
alb_frontend --> ec2_frontend_1
alb_frontend --> ec2_frontend_2
alb_frontend --> ec2_frontend_3
alb_backend --> ec2_backend_1
alb_backend --> ec2_backend_2
alb_backend --> ec2_backend_3
ec2_backend_1 --> rds_multi_az
ec2_backend_2 --> rds_multi_az
ec2_backend_3 --> rds_multi_az
apigateway --> alb_backend
cognito --> apigateway

@enduml